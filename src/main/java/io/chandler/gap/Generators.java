package io.chandler.gap;

import java.util.HashMap;
import java.util.HashSet;
import java.util.TreeMap;
import java.util.function.BiConsumer;

import io.chandler.gap.GroupExplorer.MemorySettings;
import io.chandler.gap.cache.State;

public class Generators {
    public static final String quantum_loopover = "[(1,2,3,4)(12,11,10,9),(5,6,7,8)(16,15,14,13),(1,5,9,13)(15,11,7,3),(2,6,10,14)(16,12,8,4)]";

    // https://www.sciencedirect.com/science/article/pii/0012365X9390222F?ref=cra_js_challenge&fr=RR-1
    public static final String m12 = "[(1,2,3)(4,5,6)(7,8,9)(10,11,12),(3,4)(6,7)(9,10)(11,12)]";
    public static final String m11 = "[(1,2,3,4,5,6,7,8,9,10,11),(3,7,11,8)(4,10,5,6)]";

    public static final String m11_12pt = "[(1,6)(2,9)(5,7)(8,10),(1,6,7,4)(2,8)(3,9)(5,11,12,10)]";
    
    public static final String q8 = "[(1,2,4,7)(3,6,8,5),(1,3,4,8)(2,5,7,6)]";
    
    public static final String l2_8 = "[(1,3,2)(4,5,6)(7,8,9),(1,2)(3,4)(6,7)(8,9)]";
    public static final String ree3 = "[(1,2,3)(5,6,7),(2,4,5)(6,8,9)]";
    public static final String a9 = "[(1,2,3)(4,5,6),(2,4,3)(7,8,5),(2,7,5)(6,9,4)]";

    public static final String a5 = "[(1,2)(3,4),(1,3,5)]"; // PSL(2,4)
    public static final String a5_6pt = "[(2,4)(5,6),(1,2,3)(4,5,6)]"; // PSL(2,5)
    public static final String a5_10pt = "[(2,4)(3,5)(6,8)(7,10),(1,2,3)(4,6,7)(5,8,9)]";

    public static final String icosahedral_symm_12pt = "[(1,2,12)(3,5,9)(8,10,4)(6,7,11),(2,3,12)(4,1,10)(9,6,5)(7,8,11)]";

    public static final String m9 = "[(1,4,9,8)(2,5,3,6),(1,6,5,2)(3,7,9,8)]";

    public static final String m10_a6 = "[(2,3)(4,6)(5,7)(8,9),(1,2)(3,4,7,9,10,8,6,5)]";

    public static final String pgl_2_9 = "[(1,2)(3,5)(4,6)(7,8)(9,10),(2,3,4)(5,7,8)(6,9,10)]";
    public static final String pgl_2_11 = "[(1,8,2)(3,4,7)(5,12,11)(6,9,10),(2,7,11,3,8)(4,12,10,6,5),(1,7,3,12,8,2,4,5,10,11)]";
    public static final String pgl_2_13 = "[(1,14,2)(3,8,13)(4,10,11)(5,6,12),(1,14,12,5)(3,10,8,7)(4,9,11,13),(1,12,13,10)(2,8,11,7)(3,9,4,14)]";
    public static final String pgl_2_19 = "[(2,4)(3,5)(6,10)(7,11)(8,12)(9,13)(14,17)(15,18)(19,20),(1,2,3)(4,6,7)(5,8,9)(11,12,14)(13,15,16)(17,19,18)]";

    public static final String a8_15pts = "[(1,2,4)(3,6,9)(5,8,12)(7,10,14)(11,13,15),(1,3,7,11,8,13,15)(2,5,6,10,9,14,4)]";

    // M12:2 - 24 point representation
    public static final String m12_2 = "[(1,4)(2,17)(3,15)(5,18)(6,19)(7,12)(8,10)(9,21)(11,13)(14,16)(20,23)(22,24),(2,18,23)(3,19,14)(4,11,21)(5,10,16)(7,22,13)(17,24,20)]";

    public static final String _2_m12 = "[(1,2)(3,5)(7,10)(9,11)(13,16)(14,18)(19,21)(23,24),(1,3,6,9,13,17)(2,4,7,11,15,19)(5,8,12,16,20,22)(10,14,18,21,23,24)]";

    // https://web.archive.org/web/20021231011543/http://www.mat.bham.ac.uk/atlas/html/M20.html

    // M20 = 2^4:A5 as permutations on 16 points - primitive (2-transitive)
    public static final String m20_16pt = "[(1,2,4,3)(5,10,15,9)(6,11,16,12)(7,8,14,13),(2,5,6)(3,7,8)(4,9,10)(11,14,16)(12,15,13)]";

    // M20 = 2^4:A5 as permutations on 20 points - the natural representation
    public static final String m20 = "[(1,2,4,3)(5,11,7,12)(6,13)(8,14)(9,15,10,16)(17,19,20,18),(2,5,6)(3,7,8)(4,9,10)(11,17,12)(13,16,18)(14,15,19)]";
    
    // M20 = 2a.M20 = 2^(1+4):A5 on 12 points
    public static final String m20_12pt = "[(4,7,6,8)(9,12,11,10),(1,2,4)(3,5,6)(7,9,10)(8,11,12)]";
    public static final String m20b_12pt = "[(1,2)(3,5)(4,7,6,8)(9,12,11,10),(1,3,4)(2,5,6)(7,9,10)(8,11,12)]";

    public static final String m20_24pt = "[(1,2)(3,5)(4,7)(6,8)(9,13,11,14)(10,15,12,16)(17,19)(18,20)(21,22)(23,24),(1,2,4)(3,5,6)(7,9,10)(8,11,12)(13,16,17)(14,15,18)(19,21,22)(20,23,24)]";

    // M11 on 55 points
    public static final String m11_55pt = "[(1,37)(3,39)(4,46)(5,55)(6,48)(7,16)(8,43)(9,18)(10,52)(12,42)(14,51)(15,21)(17,41)(19,50)(22,29)(23,45)(24,31)(25,54)(26,35)(27,34)(28,33)(30,44)(32,53)(40,47)," +
                                          "(1,10,13,36)(2,25)(3,26,11,32)(4,6,24,22)(5,9,27,29)(7,14,31,23)(8,15,34,30)(12,33)(16,19,18,28)(17,20,21,35)(37,40,39,44)(38,41,42,45)(46,49,48,53)(47,50,51,54)]";

    // M11 on 66 points
    public static final String m11_66pt = "[(1,34)(2,13)(3,31)(4,14)(5,32)(7,21)(8,35)(9,18)(10,19)(12,29)(15,16)(17,33)(22,42)(23,45)(24,39)(25,40)(26,43)(27,37)(28,41)(36,38)(46,51)(47,54)(50,52)(53,55)(56,61)(57,64)(60,62)(63,65)," +
                                          "(1,27,17,25)(2,34,18,32)(3,36)(4,11,21,19)(5,22,12,28)(6,29,13,35)(7,51,62,40)(8,53,57,44)(9,54,58,45)(10,46,61,43)(14,16)(15,52,59,37)(20,49,56,42)(24,30)(26,47,63,38)(33,48,64,39)(41,50,66,65)(55,60)]";

    // M12 on 66 points
    public static final String m12_66pt = "[(2,3)(4,6)(5,7)(8,11)(9,12)(10,14)(13,18)(15,20)(16,21)(17,23)(19,26)(22,30)(27,34)(29,36)(31,39)(32,41)(33,42)(35,45)(37,47)(38,43)(44,51)(46,53)(48,54)(50,56)(55,59)(57,61)(58,62)(60,63)," +
                                          "(1,2,4)(3,5,8)(6,9,13)(7,10,15)(11,16,22)(12,17,24)(14,19,27)(18,25,32)(20,28,35)(21,29,37)(23,31,40)(26,33,43)(30,38,48)(34,44,52)(36,46,42)(39,49,55)(41,50,47)(45,53,58)(51,57,54)(56,60,64)(59,61,63)(62,65,66)]";

    // 2.M12.2
    public static final String _2_m12_2 = "[(1,2)(3,5)(4,7)(6,10)(8,12)(9,13)(11,16)(14,17)(15,20)(18,23)(19,25)(21,28)(22,29)(24,31)(26,32)(27,33)(30,36)(34,39)(35,40)(37,42)(38,44)(41,46)(43,47)(45,48)," +
                                          "(1,3,6)(2,4,8)(5,9,14)(7,11,17)(10,15,21)(12,18,24)(13,19,26)(16,22,30)(20,27,34)(29,35,41)(31,37,43)(32,38,45)]";

    // A6 10pt / Eliac: [ (1,2,3,4)(5,6,7,8), (1,5)(2,9)(4,10) ]
    public static final String eliac = "[(1,2,3,4)(5,6,7,8),(1,5)(2,9)(4,10)]";

    //https://brauer.maths.qmul.ac.uk/Atlas/misc/24A8/
    public static final String _24a8 = "[(1,3,17)(2,4,18)(5,9,26)(6,10,25)(7,11,28)(8,12,27)(13,23,16)(14,24,15)(19,22,30)(20,21,29),(3,5,7,9,11,13,15)(4,6,8,10,12,14,16)(17,19,21,23,25,27,29)(18,20,22,24,26,28,30)]";

    public static final String icosian_24pt = "[(1,2,5,4)(3,6,8,7)(9,13,11,14)(10,15,12,16)(17,19,18,20)(21,24,23,22),(1,3,2)(4,5,8)(6,9,10)(7,11,12)(13,16,17)(14,15,18)(19,21,22)(20,23,24)]";
    public static final String icosian_40pt = "[(1,2,4,3)(5,9,7,10)(6,11,8,12)(13,18,15,20)(14,21,16,22)(17,23,19,24)(25,33,27,34)(26,31,28,29)(30,35,32,36)(37,39,38,40),(2,5,6)(3,7,8)(9,13,14)(10,15,16)(11,17,18)(12,19,20)(21,25,26)(22,27,28)(23,29,30)(24,31,32)(33,36,37)(34,35,38)]";

    // This is order 660, PSL(2,11) ?
    public static final String l2_11 = "[(1,2,3,4,5,6,7,8,9,10,11),(12,1)(2,11)(3,6)(4,8)(5,9)(7,10)]";
    public static final String l2_13 = "[(1,12)(2,6)(3,4)(7,11)(9,10)(13,14),(1,6,11)(2,4,5)(7,8,10)(12,14,13)]";
    public static final String l2_13_2 = "[(1,2)(3,5)(4,6)(7,9)(8,11)(10,12)(13,14),(1,3,5,8)(2,4,7,10)(6,9,11,13)]";
    public static final String l2_16 = "[(1,2)(3,4)(5,6)(7,9)(10,11)(12,13)(14,16)(15,17),(1,3,2)(4,5,7)(6,8,10)(11,12,14)(13,15,17)]";
    public static final String l2_16_2 = "[(1,4,12,7)(3,16,9,8)(5,15,13,11)(6,14,10,17),(2,3,9,11,5,16)(4,7,17)(6,12,10,14,15,13)]";
    public static final String l2_16_4 = "[(1,7,13,15)(2,5,17,3)(4,8,9,14)(6,12),(1,2,3,16,17,10,5,15)(4,11,14,12,7,13,6,9)]";
    public static final String l2_17 = "[(1,16)(2,8)(3,11)(5,10)(6,14)(7,12)(9,15)(17,18),(1,8,15)(2,11,7)(3,4,10)(5,14,9)(6,12,13)(16,18,17)]";
    public static final String l2_19 = "[(3,19,17,15,13,11,9,7,5)(4,20,18,16,14,12,10,8,6),(1,2,12)(3,11,13)(4,17,6)(5,14,8)(7,20,18)(10,19,16)]";
    public static final String l2_23 = "[(1,22)(2,11)(3,15)(4,17)(5,9)(6,19)(7,13)(8,20)(10,16)(12,21)(14,18)(23,24),(1,11,21)(2,15,10)(3,17,14)(4,9,16)(5,19,8)(6,13,18)(7,20,12)(22,24,23)]";
    public static final String l2_25 = "[(3,25,23,6,20,18,5,15,13,4,10,8)(7,26,24,22,21,19,17,16,14,12,11,9),(1,2,5)(3,4,6)(7,18,14)(8,22,9)(10,17,12)(11,25,24)(15,26,19)(16,23,21)]";
    public static final String l2_29 = "[(1,28)(2,14)(3,19)(4,7)(5,23)(6,24)(8,18)(9,16)(10,26)(11,21)(13,20)(15,27)(22,25)(29,30),(1,14,27)(2,19,13)(3,7,18)(4,23,6)(5,24,22)(8,16,17)(9,26,15)(10,21,25)(11,12,20)(28,30,29)]";
    public static final String l2_31 = "[(1,2)(3,5)(4,6)(7,9)(8,10)(11,14)(12,15)(13,17)(16,21)(18,23)(19,20)(22,27)(24,25)(26,28)(29,31)(30,32),(1,3,5)(2,4,7)(6,8,11)(9,12,16)(10,13,18)(14,19,24)(15,20,25)(17,22,28)(21,26,30)(23,29,32)]";
    public static final String l2_32 = "[(1,2)(3,4)(5,6)(7,9)(8,10)(11,13)(12,14)(15,17)(16,19)(18,22)(20,24)(21,23)(25,28)(27,29)(30,31)(32,33),(1,3,2)(4,5,7)(6,8,11)(9,10,12)(13,15,18)(14,16,20)(17,21,25)(19,23,27)(22,26,24)(28,29,30)(31,32,33)]";
    public static final String l2_32_5 = "[(1,2)(3,5)(4,7)(6,11)(8,13)(10,14)(12,17)(15,19)(16,23)(18,21)(20,22)(24,30)(25,27)(26,32)(28,33)(29,31),(2,3,6,8,4)(5,9,12,7,10)(11,15,22,24,16)(13,18,27,28,19)(14,20,29,30,21)(17,25,23,31,26)]";
    public static final String l2_47 = "[(1,32)(2,31)(3,35)(4,25)(5,9)(6,17)(7,41)(8,12)(10,22)(11,46)(13,38)(14,28)(15,16)(18,27)(19,24)(20,26)(21,29)(23,33)(30,40)(34,42)(36,45)(37,43)(39,44)(47,48),(1,16,22)(2,5,11)(3,8,26)(4,35,42)(6,15,27)(7,18,40)(9,20,33)(10,36,28)(12,21,46)(13,34,30)(14,43,39)(17,45,37)(19,24,47)(23,31,38)(25,41,44)(29,32,48)]";
    public static final String l2_59 = "[(1,30)(2,7)(3,53)(4,38)(5,15)(6,47)(8,11)(9,18)(10,40)(12,52)(13,50)(14,46)(16,20)(17,21)(19,28)(22,32)(23,49)(24,45)(25,43)(26,29)(27,55)(31,48)(33,57)(34,42)(35,36)(37,44)(39,41)(51,58)(54,56)(59,60),(1,33,20)(2,25,12)(3,7,46)(4,23,21)(5,49,34)(6,26,32)(8,36,18)(9,37,27)(10,17,30)(11,54,40)(13,19,39)(14,50,47)(15,28,35)(16,58,52)(22,41,24)(29,51,45)(31,56,53)(38,42,57)(43,44,55)(48,59,60)]";
    
    public static final String l2_11_11pt = "[(1,2,3,4,5,6,7,8,9,10,11),(2,4)(3,9)(5,10)(7,11)]";

    public static final String l3_4_m21 = "[(1,2)(4,6)(5,7)(8,12)(9,14)(10,15)(11,17)(13,19),(2,3,5,4)(6,8,13,9)(7,10,16,11)(12,18)(14,20,21,15)(17,19)]";
    public static final String l3_5 = "[(1,2,4)(3,5,7)(6,8,11)(9,12,16)(10,14,15)(13,17,21)(18,22,23)(19,24,29)(20,26,25)(28,30,31),(1,3,6,9,13)(7,10,15,19,25)(11,14,18,23,28)(16,20,22,27,29)(21,24,30,26,31)]";
    public static final String l3_7 = "[(1,14)(2,51)(3,47)(4,53)(5,44)(6,19)(7,10)(8,16)(11,45)(12,28)(13,34)(17,27)(18,37)(20,29)(22,41)(23,32)(24,38)(26,35)(30,42)(31,55)(33,56)(36,52)(43,57)(48,54),(1,4,33)(2,54,35)(3,25,23)(5,28,31)(6,52,45)(7,22,46)(8,15,43)(9,47,48)(10,51,12)(11,30,41)(13,32,16)(14,57,27)(17,19,50)(18,29,40)(21,44,49)(24,37,26)(34,55,39)(38,53,56)]";

    // PSL(3,3)
    // This was generated on PI as (V6L,V9L,V31R,V32R),(V5R,V8R,V20R)
    public static final String l3_3 = "[(1,2,3)(4,5,6)(7,8,9)(10,11,12),(13,7,3)(2,10,6)(8,11,9)]";

    public static final String l4_2_s3 = "[(1,2)(3,4)(5,6)(7,8)(9,10)(11,12)(13,14),(3,6)(5,14)(7,15)(16,10)(17,11)(18,2)(13,4),(1,3)(8,4)(9,15)(11,19)(18,20)(21,14)(12,10),(1,6)(5,21)(7,9)(16,12)(8,13)(17,19)(2,20)]";
    public static final String l4_2_d12 = "[(7,9,8)(10,18,14)(11,21,16)(12,19,17)(13,20,15)(24,26,25)(28,30,29)(32,34,33)(36,38,37)(40,42,41),(1,2,6,7,11,3,10)(4,14,8,15,16,20,13)(5,18,9,19,21,17,12)(22,27,23,28,31,32,24)(25,29,39,36,38,33,37)(26,30,35,40,41,34,42),(4,5)(8,9)(12,13)(14,18)(15,19)(16,21)(17,20)(25,26)(29,30)(33,34)(35,39)(36,40)(37,42)(38,41),(1,27)(2,23)(3,31)(4,39)(5,35)(6,22)(7,28)(8,30)(9,29)(10,24)(11,32)(12,42)(13,37)(14,26)(15,36)(16,34)(17,41)(18,25)(19,40)(20,38)(21,33)]";
    public static final String l4_2 = "[(8,12)(9,13)(10,14)(11,15),(1,2,4,8)(3,6,12,9)(5,10)(7,14,13,11)]";
    public static final String l5_2 = "[(4,5)(6,8)(7,9)(16,19)(18,21)(23,25)(26,27)(30,31),(1,2,3,4,6)(5,7,10,13,16)(8,11,14,17,20)(9,12,15,18,22)(19,23,26,28,30)(21,24,27,29,25)]";

    public static final String sl2_7 = "[(1,2,4,3)(5,9,7,10)(6,11,8,12)(13,16,15,14),(2,5,6)(3,7,8)(9,13,14)(10,15,16)]";

    // PSL(3,2) / PSL(2,7)
    public static final String l2_7 = "[(1,2,3)(4,5,6),(7,1,3)(5,8,6),(1,2,8)(7,4,5)]";  
    public static final String psl_3_2 = "[(4,6,2)(5,3,1),(3,6,5)(4,2,7)]";  

    public static final String sl_2_3 = "[(1,2,3)(4,5,6),(3,5,7)(6,2,8)]";  
    
    // Indirect product 2^3:L3(2)
    public static final String _2_3_psl_3_2_indirect = "[(1,2,12)(3,6,4),(1,9,2)(3,10,6),(2,9,10)(12,4,3)]";

    // Non-split extension 2^3.L3(2)
    public static final String psl_3_2_nonsplit_ext = "[(2,4)(3,5)(6,10)(7,11)(9,12)(13,14),(1,2,3)(4,6,7)(5,8,9)(10,13,12)]";

    public static final String psl_4_2_a8_nonsplit_ext = "[(1,3,17)(2,4,18)(5,9,26)(6,10,25)(7,11,28)(8,12,27)(13,23,16)(14,24,15)(19,22,30)(20,21,29),(3,5,7,9,11,13,15)(4,6,8,10,12,14,16)(17,19,21,23,25,27,29)(18,20,22,24,26,28,30)]";

    public static final String u3_3 = "[(2,3)(4,6)(5,8)(7,11)(9,13)(10,15)(12,14)(16,20)(17,22)(18,23)(24,27)(25,28),(1,2,4,7,12,17)(3,5,9,14,19,22)(6,10,13,18,24,23)(8,11,16,21,26,28)(20,25,27)]";
    public static final String u3_3_36pt = "[(1,2)(3,4)(5,7)(8,11)(9,13)(12,16)(14,18)(17,21)(19,24)(22,27)(28,31)(33,34),(1,3,5,8,12,2)(4,6,9)(7,10,14,19,25,29)(11,15,20,24,28,32)(13,17,22)(16,21,26)(18,23,27,30,31,33)(34,35,36)]";

    public static final String u4_2 = "[(1,2)(3,5)(4,7)(6,10)(8,13)(9,15)(11,18)(12,17)(16,23)(20,25)(21,26)(22,24),(1,3,6,11,19)(2,4,8,14,22)(5,9,16,10,17)(7,12,20,13,21)(18,24,27,26,25)]";
    public static final String u4_2_36pt = "[(1,2)(3,5)(6,9)(7,11)(8,13)(12,17)(14,19)(15,21)(22,23)(24,29)(27,32)(30,34),(1,3,6,10,15)(2,4,7,12,18)(5,8,14,20,25)(9,11,16,22,27)(17,23,28,29,33)(19,24,30,35,32)(21,26,31,36,34)]";
    public static final String u4_2_2 = "[(2,3)(4,6)(5,8)(7,12)(9,16)(19,22),(1,2,4,7,13,17,9,5,3)(6,10,15,8,14,21,23,18,11)(12,19,24,26,27,25,22,16,20)]";

    public static final String u4_3    = "[(1,28,51)(2,22,3)(4,16,43)(5,75,60)(6,32,56)(7,18,12)(8,67,15)(10,45,87)(11,20,84)(13,97,27)(14,54,80)(19,59,49)(21,100,92)(23,93,25)(24,65,71)(26,66,105)(29,69,111)(30,107,57)(33,108,58)(34,61,46)(36,81,70)(37,62,76)(38,64,41)(40,42,74)(47,96,63)(48,106,73)(52,91,78)(53,94,89)(55,82,90)(72,99,103)(77,98,112)(85,104,86)(88,101,109),(1,40,106)(2,68,43)(3,10,66)(4,54,59)(5,38,102)(6,92,85)(7,27,88)(8,80,104)(9,93,72)(11,112,34)(12,50,22)(13,32,76)(14,35,103)(15,17,51)(16,94,21)(18,108,23)(19,24,78)(20,96,42)(25,28,62)(26,86,79)(29,90,41)(30,110,100)(31,53,101)(36,83,44)(37,45,95)(39,111,97)(46,98,81)(47,109,82)(48,58,55)(52,57,75)(60,73,87)(61,91,89)(63,70,74)(64,105,65)(67,71,77)(69,99,107)]";
    public static final String u4_3_2  = "[(1,21,49)(2,88,71)(3,19,5)(4,92,53)(6,100,101)(7,67,33)(9,109,23)(10,42,45)(11,37,64)(12,46,98)(13,69,97)(14,107,76)(15,80,73)(16,81,106)(17,79,104)(18,110,54)(20,112,65)(22,94,41)(24,66,28)(25,38,105)(26,56,60)(27,52,63)(30,72,59)(31,47,83)(34,102,62)(35,111,91)(36,93,108)(39,84,103)(40,50,90)(43,75,68)(44,82,85)(48,58,51)(55,87,86)(57,77,70)(61,99,89)(78,95,96),(1,62)(2,91)(3,6)(4,15)(5,51)(7,106)(8,89)(9,54)(10,35)(11,18)(12,44)(13,71)(14,28)(16,50)(17,21)(19,41)(20,38)(22,70)(23,49)(24,64)(25,79)(26,99)(27,84)(29,87)(30,37)(31,45)(32,36)(33,66)(34,65)(39,46)(40,80)(42,94)(43,107)(47,77)(48,105)(52,102)(53,98)(55,81)(56,90)(57,60)(58,86)(59,97)(61,95)(63,67)(68,92)(69,76)(72,109)(73,101)(74,96)(75,111)(78,82)(83,85)(88,108)(93,103)(100,112)(104,110)]";
    public static final String u4_3_4  = "[(1,96,37)(2,67,3)(4,5,11)(6,20,74)(8,104,44)(9,45,85)(10,22,86)(12,98,90)(13,102,92)(14,112,50)(16,56,17)(18,65,26)(19,28,83)(21,88,49)(23,75,54)(24,58,80)(25,62,48)(27,51,33)(29,64,91)(30,60,40)(31,78,53)(32,97,73)(34,66,99)(35,52,38)(36,101,55)(39,41,110)(42,93,81)(43,76,100)(46,108,109)(47,57,71)(59,106,103)(61,63,77)(68,87,79)(69,111,89)(70,95,105)(72,82,107),(1,46)(2,92)(3,18)(4,11)(5,39)(6,20)(7,110)(8,94)(9,99)(10,13)(12,24)(14,107)(15,37)(16,81)(17,78)(19,109)(21,93)(23,38)(25,68)(26,51)(27,86)(28,108)(29,87)(30,34)(31,42)(33,43)(35,79)(36,66)(40,95)(44,96)(45,91)(47,50)(48,72)(49,98)(52,55)(53,73)(54,105)(56,58)(57,70)(59,102)(60,62)(61,84)(63,74)(64,71)(67,103)(69,82)(75,89)(76,106)(83,104)(85,111)(90,97)(101,112),(1,45)(2,5)(3,64)(4,8)(6,56)(7,30)(9,52)(10,105)(11,33)(12,51)(13,73)(14,87)(15,66)(16,74)(17,22)(18,112)(19,84)(20,70)(21,71)(23,34)(24,85)(25,26)(27,110)(28,40)(29,43)(31,72)(32,102)(35,55)(36,58)(37,106)(38,103)(39,100)(41,44)(42,61)(46,89)(47,88)(48,68)(49,108)(50,65)(53,107)(54,94)(57,69)(59,81)(60,83)(62,79)(63,80)(67,98)(75,99)(76,90)(77,96)(78,92)(82,97)(86,95)(91,104)(93,101)(109,111)]";    
    public static final String u4_3_d8 = "[(2,4)(3,5)(6,10)(7,11)(8,12)(14,22)(15,23)(17,26)(19,29)(20,25)(24,35)(27,39)(28,41)(30,44)(31,46)(32,47)(33,40)(37,52)(42,58)(43,60)(45,63)(48,50)(49,69)(51,64)(54,75)(67,84)(70,87)(72,88)(76,91)(81,96)(82,92)(83,98)(89,102)(90,100)(101,103)(104,110),(1,2,4,7,6,3)(5,8,13,21,14,9)(10,15,24,36,25,16)(11,17,27,40,28,18)(12,19,30,45,31,20)(22,32,48,68,49,33)(23,34)(26,37,53,74,54,38)(29,42,59,57,41,43)(35,50,70,87,71,51)(39,55,65,46,64,56)(44,61,79,95,80,62)(47,66,83,99,85,67)(52,72,89,100,84,73)(58,76,92,105,93,77)(60,78,94,103,90,75)(63,81,69,86,97,82)(88,101,107,106,96,98)(91,104)(102,108,111,110,112,109)]";

    // Symplectic / O(7,2)
    public static final String sp_6_2 = "[(2,3)(6,7)(9,10)(12,14)(17,19)(20,22),(1,2,3,4,5,6,8)(7,9,11,13,16,18,14)(10,12,15,17,20,19,21)(22,23,24,25,26,27,28)]";

    public static final String psu3_2 = "[(2,5)(3,4)(6,16,7,17)(8,14,9,15)(10,19,11,18)(12,21,13,20),(1,6,21,13)(2,10,8,3)(4,14)(5,18,15,19)(7,16,17,12)(9,11)]";

    //https://web.archive.org/web/20030301122101/http://www.mat.bham.ac.uk/atlas/html/WF4.html
    public static final String wf4 = "[(2,3)(4,6)(5,7)(8,10)(9,12)(11,13)(14,17)(15,19)(16,21)(18,20)(22,23),(1,2)(3,4,5)(6,8,11,10,7,9)(12,14,18,21,20,15)(13,16)(17,19,22)(23,24)]";
    
    public static final String sz8_3 = "[(2,3)(4,6)(5,7)(8,10)(9,11)(12,15)(13,16)(14,18)(17,22)(19,24)(20,25)(21,27)(23,30)(26,34)(28,36)(29,37)(31,33)(32,39)(35,43)(38,45)(40,48)(41,49)(42,50)(44,53)(46,55)(47,56)(51,58)(52,59)(54,61)(57,60)(62,64)(63,65),(1,2,4)(3,5,8)(6,9,12)(10,13,17)(11,14,19)(15,20,26)(16,21,28)(18,23,31)(22,29,36)(24,32,40)(25,33,41)(27,35,44)(30,38,46)(34,42,51)(39,47,53)(43,52,60)(45,54,62)(48,50,55)(49,57,58)(56,61,63)]";
    public static final String sz8 = "[(1,2)(3,4)(5,7)(6,9)(8,12)(10,13)(11,15)(14,19)(16,21)(17,23)(18,25)(20,28)(22,31)(24,33)(26,35)(27,32)(29,37)(30,39)(34,43)(36,46)(38,48)(41,51)(42,44)(45,55)(47,50)(49,58)(52,60)(53,61)(54,59)(56,62)(57,63)(64,65)," + 
                                      "(1,3,5,8)(4,6,10,14)(7,11,16,22)(9,12,17,24)(13,18,26,36)(15,20,29,38)(19,27,31,28)(21,30,40,50)(23,32,41,52)(25,34,44,54)(33,42,53,43)(35,45,56,63)(37,47,51,46)(39,49,59,60)(48,57,55,58)(61,64,62,65)]";
    public static final String j1 = "[(1,262)(2,107)(3,21)(4,213)(5,191)(6,22)(7,133)(8,234)(9,232)(10,151)(11,139)(12,176)(13,202)(14,253)(15,222)(17,195)(18,206)(19,68)(20,55)(23,179)(24,217)(25,216)(26,256)(27,87)(28,70)(29,131)(30,44)(31,105)(32,170)(33,77)(34,104)(35,198)(36,137)(37,243)(38,56)(39,124)(40,223)(41,134)(43,174)(46,51)(47,128)(48,94)(49,250)(50,264)(52,183)(53,231)(54,115)(57,85)(58,233)(59,261)(60,95)(61,235)(62,177)(63,249)(64,91)(65,247)(66,155)(69,219)(71,237)(72,211)(73,84)(74,192)(75,130)(76,251)(79,260)(80,112)(81,193)(82,156)(83,242)(86,238)(88,143)(89,168)(90,148)(92,119)(93,212)(96,150)(97,199)(98,140)(99,189)(100,180)(101,147)(102,111)(103,159)(106,162)(108,194)(109,166)(110,200)(113,120)(114,141)(116,182)(117,181)(118,225)(121,254)(122,125)(123,146)(126,208)(127,221)(129,210)(132,255)(136,175)(138,207)(142,240)(144,172)(145,185)(149,224)(152,169)(153,241)(154,190)(157,214)(158,161)(160,236)(163,239)(164,229)(165,230)(167,188)(171,258)(173,186)(178,245)(184,205)(187,228)(197,203)(201,252)(209,248)(215,259)(218,246)(220,227)(257,263)(265,266),(1,146,21)(2,132,82)(4,156,166)(5,242,253)(6,107,28)(7,125,76)(8,245,130)(9,174,42)(10,241,244)(11,264,63)(12,248,234)(13,36,44)(14,116,128)(15,47,25)(16,178,112)(17,170,110)(18,197,74)(19,233,180)(20,121,96)(22,228,155)(23,48,173)(24,201,187)(26,136,190)(27,212,94)(29,175,52)(30,77,32)(31,237,34)(33,226,90)(35,129,54)(37,161,114)(38,232,87)(39,219,192)(40,78,159)(41,139,71)(43,211,251)(45,222,240)(46,97,135)(49,70,131)(50,153,200)(51,186,209)(53,203,216)(55,169,64)(56,140,230)(57,260,118)(58,91,243)(59,199,227)(60,108,164)(61,208,101)(62,206,106)(65,103,66)(67,95,205)(68,73,225)(69,151,113)(72,221,152)(75,143,202)(79,217,254)(80,93,122)(81,181,252)(83,258,126)(84,163,177)(85,154,213)(86,182,196)(88,133,215)(89,117,247)(92,191,160)(99,229,263)(100,138,188)(102,194,157)(105,149,184)(109,123,193)(111,137,183)(115,238,235)(119,167,147)(120,134,189)(124,185,265)(127,218,261)(141,231,210)(142,239,236)(144,224,249)(145,158,220)(148,214,172)(150,250,259)(162,257,256)(165,179,246)(176,195,266)(198,204,207)(223,262,255)]";
    public static final String j2 = "[(1,84)(2,20)(3,48)(4,56)(5,82)(6,67)(7,55)(8,41)(9,35)(10,40)(11,78)(12,100)(13,49)(14,37)(15,94)(16,76)(17,19)(18,44)(21,34)(22,85)(23,92)(24,57)(25,75)(26,28)(27,64)(29,90)(30,97)(31,38)(32,68)(33,69)(36,53)(39,61)(42,73)(43,91)(45,86)(46,81)(47,89)(50,93)(51,96)(52,72)(54,74)(58,99)(59,95)(60,63)(62,83)(65,70)(66,88)(71,87)(77,98)(79,80),(1,80,22)(2,9,11)(3,53,87)(4,23,78)(5,51,18)(6,37,24)(8,27,60)(10,62,47)(12,65,31)(13,64,19)(14,61,52)(15,98,25)(16,73,32)(17,39,33)(20,97,58)(21,96,67)(26,93,99)(28,57,35)(29,71,55)(30,69,45)(34,86,82)(38,59,94)(40,43,91)(42,68,44)(46,85,89)(48,76,90)(49,92,77)(50,66,88)(54,95,56)(63,74,72)(70,81,75)(79,100,83)]";
    public static final String j2_2 = "[(1,88)(2,22)(4,5)(6,98)(7,66)(8,24)(9,20)(10,75)(12,74)(13,39)(14,45)(15,58)(16,46)(17,55)(18,96)(19,48)(21,94)(23,76)(26,42)(27,65)(29,51)(30,86)(31,70)(32,71)(34,78)(35,93)(36,56)(37,87)(38,67)(40,83)(41,59)(43,73)(47,100)(49,72)(50,77)(52,95)(54,84)(57,82)(61,91)(62,64)(69,81)(79,97)(89,99),(1,59,75,7,64)(2,84,69,93,9)(3,78,51,10,30)(4,14,20,67,8)(5,99,43,32,46)(6,54,89,11,90)(12,33,21,56,35)(13,58,87,49,45)(15,18,76,94,37)(16,50,88,79,27)(17,70,52,82,38)(19,91,41,73,62)(22,55,23,65,86)(24,61,29,98,63)(25,81,96,83,48)(26,68,77,100,44)(28,92,97,57,34)(31,36,72,85,47)(39,95,60,66,42)(40,80,74,71,53)]";
    public static final String hs = "[(1,60)(2,72)(3,81)(4,43)(5,11)(6,87)(7,34)(9,63)(12,46)(13,28)(14,71)(15,42)(16,97)(18,57)(19,52)(21,32)(23,47)(24,54)(25,83)(26,78)(29,89)(30,39)(33,61)(35,56)(37,67)(44,76)(45,88)(48,59)(49,86)(50,74)(51,66)(53,99)(55,75)(62,73)(65,79)(68,82)(77,92)(84,90)(85,98)(94,100),(1,86,13,10,47)(2,53,30,8,38)(3,40,48,25,17)(4,29,92,88,43)(5,98,66,54,65)(6,27,51,73,24)(7,83,16,20,28)(9,23,89,95,61)(11,42,46,91,32)(12,14,81,55,68)(15,90,31,56,37)(18,69,45,84,76)(19,59,79,35,93)(21,22,64,39,100)(26,58,96,85,77)(33,52,94,75,44)(34,62,87,78,50)(36,82,60,74,72)(41,80,70,49,67)(57,63,71,99,97)]";
    public static final String hs_2 = "[(1,86)(4,54)(5,30)(6,57)(8,44)(9,52)(11,14)(13,42)(18,43)(19,85)(20,65)(22,91)(23,71)(24,87)(25,50)(26,78)(27,88)(29,73)(31,76)(33,84)(34,72)(35,97)(36,53)(37,63)(39,47)(40,99)(45,80)(55,81)(58,79)(62,83)(66,77)(67,98)(68,100)(69,93)(74,89),(1,49,14,37,74)(2,16,52,96,44)(3,99,38,18,61)(5,62,64,65,95)(6,8,40,85,58)(7,68,80,9,39)(10,19,31,97,72)(11,77,93,84,98)(12,46,86,78,42)(13,23,54,29,15)(17,82,69,34,30)(21,28,56,88,89)(22,100,73,87,35)(24,79,67,59,32)(25,43,27,66,75)(26,92,47,50,94)(33,36,57,70,81)(41,83,55,91,51)(45,90,60,48,71)]";
    public static final String mcl = "[(1,191)(2,182)(4,81)(5,55)(6,60)(8,66)(9,272)(10,177)(11,192)(12,163)(14,242)(15,133)(16,107)(18,267)(19,108)(20,218)(21,198)(22,185)(23,211)(24,82)(25,204)(26,195)(27,132)(28,253)(29,207)(30,59)(31,179)(32,154)(33,264)(34,152)(35,92)(36,189)(37,217)(38,197)(39,85)(40,156)(42,184)(43,102)(44,50)(45,216)(46,99)(47,181)(49,199)(51,111)(53,158)(54,236)(56,210)(58,103)(61,263)(63,119)(64,138)(65,127)(67,105)(68,137)(70,125)(71,144)(72,219)(73,261)(75,175)(77,269)(78,237)(79,268)(83,232)(84,256)(86,104)(87,95)(89,234)(90,233)(91,140)(94,149)(97,173)(98,160)(100,112)(101,123)(106,221)(109,131)(110,176)(113,262)(114,257)(115,201)(117,260)(118,238)(120,275)(121,214)(122,225)(124,246)(126,170)(129,141)(134,196)(135,167)(142,235)(143,224)(145,205)(146,249)(148,226)(150,243)(153,193)(155,228)(161,231)(164,215)(165,180)(168,222)(169,270)(171,241)(172,259)(174,212)(178,188)(183,266)(186,203)(190,250)(202,247)(208,255)(209,251)(213,252)(223,271)(227,274)(230,240)(239,254)(245,258)(265,273),(1,24,204,92,155)(2,28,272,165,78)(3,67,142,31,255)(4,168,77,17,100)(5,118,19,223,211)(6,274,137,79,245)(7,98,75,73,14)(8,209,43,139,193)(9,266,104,70,145)(10,271,12,13,71)(11,247,138,121,269)(15,218,133,164,196)(16,170,182,65,171)(18,26,198,124,185)(20,128,159,83,38)(21,264,27,64,162)(22,116,53,101,51)(23,179,244,80,203)(25,40,177,85,191)(29,56,135,68,195)(30,132,42,248,146)(32,148,114,49,134)(33,61,163,90,227)(34,241,233,95,181)(35,89,82,205,41)(36,239,275,257,183)(37,54,99,249,176)(39,126,189,136,230)(44,172,153,125,119)(45,234,222,232,212)(46,214,69,167,190)(47,140,268,174,62)(48,55,113,220,235)(50,213,224,202,130)(52,107,262,226,88)(57,221,261,129,58)(59,252,260,216,166)(60,84,188,208,201)(63,94,173,210,81)(66,192,93,169,110)(72,152,197,217,254)(74,206,154,186,219)(76,91,180,238,112)(86,215,231,131,225)(87,115,158,178,240)(96,265,161,120,144)(97,250,243,263,109)(102,207,246,122,127)(103,156,160,151,150)(105,267,199,111,117)(106,273,242,149,143)(108,256,157,147,184)(123,141,259,175,200)(187,251,258,194,236)(228,237,253,270,229)]";
    
    public static final String m22 = "[(1,13)(2,8)(3,16)(4,12)(6,22)(7,17)(9,10)(11,14),(1,22,3,21)(2,18,4,13)(5,12)(6,11,7,15)(8,14,20,10)(17,19)]";
    public static final String m22_77pt = "[(3,5)(4,6)(8,12)(9,13)(11,15)(14,20)(16,19)(17,22)(18,23)(21,25)(24,30)(26,32)(27,34)(28,35)(29,37)(31,39)(33,41)(36,46)(38,48)(42,53)(43,44)(45,56)(49,59)(51,61)(58,67)(60,65)(62,66)(68,74)(69,72)(70,71)(73,76)(75,77),(1,2,4,3)(5,7,11,8)(6,9,14,10)(12,16,21,17)(13,18,24,19)(22,26,33,27)(23,28,36,29)(25,31)(30,38)(32,40)(34,42,54,43)(35,44,55,45)(37,47)(39,49,60,50)(41,51,46,52)(48,57,66,58)(53,62,71,63)(56,64,72,65)(59,68,73,67)(61,69,75,70)]";
    public static final String m23 = "[(1,2)(3,4)(7,8)(9,10)(13,14)(15,16)(19,20)(21,22),(1,16,11,3)(2,9,21,12)(4,5,8,23)(6,22,14,18)(13,20)(15,17)]";
    public static final String m24 = "[(1,4)(2,7)(3,17)(5,13)(6,9)(8,15)(10,19)(11,18)(12,21)(14,16)(20,24)(22,23),(1,4,6)(2,21,14)(3,9,15)(5,18,10)(13,17,16)(19,24,23)]";

    public static final String m22_2 = "[(3,18)(4,16)(5,6)(7,11)(8,17)(12,15)(13,21),(1,2,13,8)(3,9,16,10)(4,17,12,7)(5,20)(6,14,22,11)(15,18)(19,21)]";

    public static final String tg = "[(1,2)(3,4)(5,6)(7,9)(8,10)(11,14)(12,15)(13,17)(16,21)(18,23)(19,24)(20,26)(22,29)(25,33)(27,35)(28,36)(30,39)(31,40)(32,42)(34,44)(37,47)(38,48)(41,52)(43,54)(45,57)(46,58)(49,62)(50,63)(51,65)(53,68)(55,71)(56,72)(59,76)(60,77)(61,79)(64,83)(66,85)(67,86)(69,89)(70,90)(73,94)(74,95)(75,97)(78,101)(80,102)(81,103)(82,105)(84,108)(87,112)(88,113)(91,117)(92,118)(93,120)(96,124)(98,126)(99,110)(100,128)(104,133)(106,135)(107,136)(109,139)(111,141)(114,145)(115,146)(116,148)(119,152)(121,154)(122,155)(123,157)(125,160)(127,163)(129,165)(130,166)(131,167)(132,169)(134,172)(137,176)(138,177)(140,180)(142,182)(143,183)(144,185)(147,189)(149,159)(150,174)(151,192)(153,195)(156,199)(158,201)(161,204)(162,205)(164,208)(168,213)(170,215)(171,216)(173,219)(175,221)(178,225)(179,226)(181,229)(184,233)(186,235)(187,236)(188,238)(190,240)(191,242)(193,244)(194,245)(196,248)(197,249)(198,251)(200,253)(202,256)(203,257)(206,261)(207,262)(209,265)(210,255)(211,267)(212,269)(214,272)(217,276)(218,277)(220,280)(222,282)(223,283)(224,285)(227,289)(228,290)(230,293)(231,274)(232,295)(234,298)(237,301)(239,302)(241,305)(243,307)(246,247)(250,313)(252,315)(254,318)(258,322)(259,323)(260,325)(263,328)(264,329)(266,332)(268,334)(270,336)(271,337)(273,340)(275,342)(278,346)(279,347)(281,350)(284,354)(286,356)(287,357)(288,358)(291,362)(292,363)(294,366)(296,368)(297,369)(299,372)(300,373)(303,377)(304,378)(306,381)(308,384)(309,385)(310,387)(311,388)(312,390)(314,393)(316,396)(317,397)(319,400)(320,401)(321,403)(324,407)(326,409)(327,410)(330,413)(331,414)(333,417)(335,420)(338,424)(339,425)(341,344)(343,429)(345,431)(348,435)(349,436)(351,439)(352,422)(353,441)(355,444)(359,449)(360,450)(361,451)(364,455)(365,456)(367,458)(370,371)(374,464)(375,465)(376,466)(379,391)(380,470)(382,473)(383,474)(386,478)(389,480)(392,482)(394,485)(395,486)(398,490)(399,491)(402,469)(404,495)(405,496)(406,498)(408,500)(411,504)(412,505)(415,509)(416,510)(418,513)(419,502)(421,516)(423,518)(426,522)(427,523)(428,525)(430,527)(432,529)(433,530)(434,532)(437,483)(438,536)(440,508)(442,540)(443,541)(445,544)(446,545)(447,547)(448,549)(452,554)(453,555)(454,557)(457,501)(459,551)(460,563)(461,565)(462,566)(463,568)(467,572)(468,573)(471,576)(472,577)(475,581)(476,582)(477,493)(479,585)(481,588)(484,590)(487,593)(488,594)(489,596)(492,600)(494,602)(497,605)(499,607)(503,586)(506,613)(507,614)(511,619)(512,620)(514,623)(515,624)(517,627)(519,616)(520,629)(521,631)(524,635)(526,622)(528,639)(531,643)(533,644)(534,618)(535,646)(537,649)(538,650)(539,651)(542,543)(546,628)(548,658)(550,660)(552,662)(553,664)(556,668)(558,670)(559,671)(560,673)(561,675)(562,659)(564,678)(567,681)(569,683)(570,684)(571,686)(574,584)(575,690)(578,694)(579,695)(580,697)(583,701)(587,704)(589,707)(591,709)(592,710)(595,713)(597,715)(598,716)(599,718)(601,721)(603,723)(604,724)(606,726)(608,729)(609,621)(610,731)(611,728)(612,733)(615,737)(617,687)(625,744)(626,745)(630,750)(632,752)(633,753)(634,755)(636,757)(637,759)(638,760)(640,763)(641,764)(642,766)(645,769)(647,771)(648,772)(652,777)(653,768)(654,779)(655,781)(656,774)(657,783)(661,787)(663,789)(665,791)(666,785)(667,793)(669,795)(672,798)(674,800)(676,801)(677,802)(679,805)(680,806)(682,782)(685,812)(688,810)(689,815)(691,818)(692,819)(693,821)(696,825)(698,827)(699,828)(700,830)(702,833)(703,834)(705,837)(706,838)(708,840)(711,844)(712,845)(714,848)(717,852)(719,854)(720,855)(722,858)(725,862)(727,864)(730,867)(732,869)(734,796)(735,870)(736,872)(738,875)(739,876)(740,878)(741,880)(742,881)(743,883)(746,886)(747,887)(748,888)(749,889)(751,892)(754,896)(756,898)(758,901)(761,762)(765,907)(767,909)(770,912)(773,915)(775,917)(776,919)(778,922)(780,924)(784,926)(786,927)(788,930)(790,925)(792,934)(794,936)(797,895)(799,921)(803,945)(804,942)(807,949)(808,950)(809,931)(811,953)(813,956)(814,958)(816,960)(817,961)(820,965)(822,967)(823,963)(824,969)(826,971)(829,975)(831,976)(832,977)(835,979)(836,902)(839,983)(841,985)(842,986)(843,988)(846,974)(847,992)(849,995)(850,996)(851,998)(853,1000)(856,1003)(857,1004)(859,964)(860,1002)(861,1007)(863,1010)(865,1012)(866,1013)(868,1015)(871,1017)(873,1019)(874,940)(877,1022)(879,903)(882,1025)(884,1027)(885,944)(890,1032)(891,1033)(893,1036)(894,1037)(897,1041)(899,1024)(900,1044)(904,1047)(905,1048)(906,1050)(908,1052)(910,1055)(911,1056)(913,1046)(914,1054)(916,1059)(918,1061)(920,1062)(923,1065)(928,1070)(929,1071)(932,1075)(933,1076)(935,1079)(937,938)(939,1014)(941,1084)(943,1086)(946,1089)(947,1090)(948,1091)(951,1094)(952,1095)(954,1097)(955,1093)(957,1099)(959,1101)(962,1103)(966,1106)(968,1109)(970,1110)(972,1113)(973,1114)(978,1119)(980,1121)(981,1122)(982,1124)(984,1058)(987,1130)(989,1131)(990,1132)(991,1134)(993,994)(997,1136)(999,1138)(1001,1139)(1005,1143)(1006,1144)(1008,1146)(1009,1030)(1011,1148)(1016,1151)(1018,1153)(1020,1155)(1021,1157)(1023,1159)(1026,1162)(1028,1042)(1029,1081)(1031,1168)(1034,1035)(1038,1172)(1039,1173)(1040,1174)(1043,1177)(1045,1179)(1049,1182)(1051,1125)(1053,1185)(1057,1189)(1060,1191)(1063,1194)(1064,1195)(1066,1197)(1067,1192)(1068,1085)(1069,1198)(1072,1201)(1073,1202)(1074,1150)(1077,1167)(1078,1205)(1080,1208)(1082,1210)(1083,1211)(1087,1212)(1088,1213)(1092,1218)(1096,1222)(1098,1224)(1100,1225)(1102,1226)(1104,1126)(1105,1229)(1107,1232)(1108,1233)(1111,1112)(1115,1238)(1116,1239)(1117,1240)(1118,1242)(1120,1244)(1123,1246)(1127,1249)(1128,1250)(1129,1251)(1133,1253)(1135,1254)(1137,1248)(1140,1236)(1141,1258)(1142,1260)(1145,1264)(1147,1266)(1149,1268)(1152,1271)(1154,1273)(1156,1275)(1158,1276)(1160,1277)(1161,1278)(1163,1281)(1164,1282)(1165,1284)(1166,1214)(1169,1285)(1170,1286)(1171,1288)(1175,1291)(1176,1292)(1178,1294)(1180,1296)(1181,1297)(1183,1299)(1184,1300)(1186,1265)(1187,1270)(1188,1302)(1190,1305)(1193,1308)(1196,1312)(1199,1314)(1200,1315)(1203,1319)(1204,1321)(1206,1323)(1207,1324)(1209,1327)(1215,1332)(1216,1334)(1217,1335)(1219,1337)(1220,1338)(1221,1322)(1223,1341)(1227,1343)(1228,1344)(1230,1347)(1231,1348)(1234,1342)(1235,1351)(1237,1352)(1241,1355)(1243,1356)(1245,1290)(1247,1359)(1252,1363)(1255,1366)(1256,1367)(1257,1368)(1259,1370)(1261,1372)(1262,1373)(1263,1345)(1267,1376)(1269,1378)(1272,1380)(1274,1382)(1279,1280)(1283,1387)(1287,1391)(1289,1329)(1293,1396)(1295,1399)(1298,1400)(1301,1403)(1303,1404)(1304,1405)(1306,1407)(1307,1408)(1309,1411)(1310,1397)(1311,1413)(1313,1415)(1316,1417)(1317,1418)(1318,1420)(1320,1422)(1325,1426)(1326,1427)(1328,1429)(1330,1371)(1331,1431)(1333,1432)(1336,1435)(1339,1428)(1340,1438)(1346,1440)(1349,1442)(1350,1443)(1353,1421)(1354,1445)(1357,1433)(1358,1449)(1360,1450)(1361,1446)(1362,1452)(1364,1455)(1365,1456)(1369,1459)(1374,1441)(1375,1465)(1377,1466)(1379,1469)(1381,1471)(1383,1463)(1384,1473)(1385,1393)(1386,1475)(1388,1476)(1389,1477)(1390,1478)(1392,1394)(1395,1474)(1398,1430)(1401,1482)(1402,1483)(1406,1486)(1409,1490)(1410,1491)(1412,1479)(1414,1494)(1416,1497)(1419,1499)(1423,1488)(1424,1501)(1425,1503)(1434,1453)(1436,1509)(1437,1511)(1439,1514)(1444,1470)(1447,1519)(1448,1520)(1451,1522)(1454,1523)(1457,1513)(1458,1524)(1460,1518)(1461,1526)(1462,1527)(1464,1515)(1467,1528)(1468,1529)(1472,1533)(1480,1481)(1484,1537)(1485,1538)(1487,1539)(1489,1541)(1492,1502)(1493,1506)(1495,1525)(1496,1545)(1498,1547)(1500,1549)(1504,1551)(1505,1552)(1507,1512)(1508,1553)(1510,1555)(1516,1556)(1517,1557)(1521,1558)(1530,1546)(1531,1540)(1532,1563)(1534,1565)(1535,1566)(1536,1567)(1542,1560)(1543,1568)(1544,1569)(1548,1573)(1550,1575)(1554,1579)(1559,1562)(1561,1564)(1570,1587)(1571,1588)(1572,1589)(1574,1590)(1576,1592)(1577,1593)(1578,1591)(1580,1581)(1582,1596)(1583,1594)(1584,1586)(1585,1597)(1595,1599)(1598,1600)," +
                                        "(1,3,2)(4,5,7)(6,8,11)(9,12,16)(10,13,18)(14,19,25)(15,20,27)(17,22,30)(21,28,37)(23,31,41)(24,32,35)(26,34,45)(29,38,49)(33,43,55)(36,46,59)(39,50,64)(40,51,66)(42,53,69)(44,56,73)(47,60,78)(48,61,80)(52,67,87)(54,70,91)(57,74,96)(58,75,98)(62,81,104)(63,82,106)(65,84,109)(68,88,114)(71,92,119)(72,93,121)(76,99,127)(77,100,129)(79,101,130)(83,107,137)(85,110,140)(86,111,142)(89,115,147)(90,116,149)(94,122,156)(95,123,158)(97,125,161)(102,131,168)(103,132,170)(105,134,173)(108,138,178)(112,143,184)(113,144,186)(117,150,191)(118,151,193)(120,153,196)(124,159,202)(126,162,206)(128,164,209)(133,171,217)(135,174,220)(136,175,222)(139,179,227)(141,181,230)(145,187,237)(146,188,236)(148,190,241)(152,194,246)(154,197,250)(155,198,238)(157,200,254)(160,203,258)(163,207,263)(165,210,266)(166,211,268)(167,212,270)(169,214,273)(172,218,278)(176,223,284)(177,224,286)(180,228,291)(182,231,294)(183,232,296)(185,234,299)(189,239,303)(192,243,308)(195,247,310)(199,252,316)(201,255,319)(204,259,324)(205,260,326)(208,264,330)(213,271,338)(215,274,341)(216,275,343)(219,279,348)(221,281,351)(225,287,328)(226,288,359)(229,292,364)(233,297,370)(235,300,374)(240,304,379)(242,306,382)(244,301,375)(245,309,386)(248,311,389)(249,312,391)(251,314,394)(253,317,398)(256,320,402)(257,321,404)(261,293,365)(262,327,411)(265,331,415)(267,333,418)(269,335,421)(272,339,426)(276,344,430)(277,345,432)(280,349,437)(282,352,440)(283,353,442)(285,355,445)(289,360,388)(290,361,452)(295,367,407)(298,371,461)(302,376,467)(305,380,471)(307,383,475)(313,392,483)(315,395,487)(318,399,492)(322,405,497)(323,406,499)(325,408,501)(329,412,506)(332,416,511)(334,419,514)(336,422,517)(337,423,519)(340,427,524)(342,428,482)(346,433,531)(347,434,533)(350,438,537)(354,443,542)(356,446,546)(357,447,548)(358,448,550)(362,453,556)(363,454,558)(366,457,561)(368,459,532)(369,460,564)(372,462,567)(373,463,569)(377,468,403)(378,469,574)(381,472,578)(384,476,486)(385,477,583)(387,479,586)(390,481,589)(393,484,591)(396,488,595)(397,489,597)(400,493,601)(401,494,603)(409,502,609)(410,503,610)(413,507,615)(414,508,616)(417,512,621)(420,515,625)(424,520,630)(425,521,632)(429,526,637)(431,528,640)(435,534,645)(436,535,647)(439,538,464)(441,539,652)(444,543,655)(449,551,661)(450,552,663)(451,553,665)(455,559,672)(456,560,674)(458,562,676)(465,570,685)(466,571,687)(470,575,691)(473,579,696)(474,580,698)(478,584,702)(480,587,705)(485,592,711)(490,598,717)(491,599,719)(495,565,679)(496,604,670)(498,606,727)(500,608,730)(504,611,732)(505,612,734)(509,617,738)(510,618,726)(513,622,741)(516,626,746)(518,628,748)(522,633,754)(523,634,675)(525,636,758)(527,638,761)(529,641,765)(530,642,767)(536,648,773)(540,653,778)(541,654,780)(544,555,667)(545,656,782)(547,657,784)(549,659,745)(554,666,792)(557,669,796)(563,677,803)(566,680,807)(568,682,809)(572,688,814)(573,689,816)(576,692,820)(577,693,822)(581,699,829)(582,700,831)(585,703,835)(588,706,839)(590,708,841)(593,662,788)(594,712,846)(596,714,849)(600,720,856)(602,722,859)(605,725,863)(607,728,865)(613,735,871)(614,736,873)(619,739,877)(620,740,879)(623,742,882)(624,743,884)(627,747,783)(629,749,890)(631,751,893)(635,756,899)(639,762,904)(643,744,885)(644,768,910)(646,770,913)(649,774,916)(650,775,918)(651,776,920)(658,785,733)(660,786,928)(664,790,932)(668,794,937)(671,797,939)(673,799,941)(678,804,946)(681,808,951)(683,810,952)(684,811,954)(686,813,957)(690,817,962)(694,823,968)(695,824,707)(697,826,972)(701,832,880)(704,836,980)(709,842,987)(710,843,989)(713,847,993)(715,850,997)(716,851,833)(718,853,1001)(721,857,912)(723,860,1006)(724,861,1008)(729,866,1014)(731,868,976)(737,874,919)(750,891,1034)(752,894,1038)(753,895,1039)(755,897,1042)(757,900,979)(759,902,1044)(760,903,1046)(763,905,1049)(764,906,1022)(766,908,1053)(769,911,1057)(771,914,1058)(772,901,1045)(777,921,1063)(779,923,1066)(781,925,1068)(787,929,1072)(789,931,1074)(791,933,1077)(793,935,1080)(795,938,1082)(798,940,1083)(800,942,1085)(801,943,1032)(802,944,1087)(805,947,915)(806,948,1092)(812,955,1098)(815,959,950)(818,963,995)(819,964,1104)(821,966,1107)(825,970,1111)(827,973,1115)(828,974,1116)(830,917,1060)(834,978,1120)(837,981,1123)(838,982,1125)(840,984,1127)(844,990,1133)(845,991,996)(848,994,1113)(852,999,969)(854,1002,1140)(855,988,1065)(858,1005,1052)(862,1009,1147)(864,1011,1019)(867,881,1024)(869,1016,1086)(870,924,1067)(872,1018,1154)(875,1020,1156)(876,1021,1158)(878,1023,1160)(883,1026,1163)(886,1028,1165)(887,1029,1166)(888,1030,1167)(889,1031,1013)(892,1035,1169)(896,1040,1175)(898,1043,1178)(907,1051,1184)(909,1054,1186)(922,1064,1196)(926,1069,1199)(927,1007,1145)(930,1073,1099)(934,1078,1206)(936,1081,1209)(945,1088,1214)(949,1093,1219)(953,1096,1185)(956,1061,1192)(958,1100,1198)(960,986,1129)(961,1102,1227)(965,1105,1230)(967,1108,1234)(971,1112,1236)(975,1117,1241)(977,1118,1121)(983,1126,1248)(985,1128,1010)(992,1135,1255)(998,1137,1256)(1000,1109,1235)(1003,1141,1259)(1004,1142,1261)(1012,1149,1269)(1015,1150,1225)(1017,1152,1233)(1025,1161,1279)(1027,1164,1283)(1033,1157,1250)(1036,1170,1287)(1037,1171,1289)(1041,1176,1084)(1047,1180,1173)(1048,1181,1281)(1050,1183,1159)(1055,1187,1301)(1056,1188,1303)(1059,1190,1306)(1062,1193,1309)(1070,1148,1267)(1071,1200,1316)(1075,1203,1320)(1076,1204,1322)(1079,1207,1325)(1089,1215,1333)(1090,1216,1275)(1091,1217,1336)(1094,1220,1266)(1095,1221,1339)(1097,1223,1342)(1101,1213,1331)(1103,1228,1345)(1106,1231,1349)(1110,1136,1240)(1114,1237,1353)(1119,1243,1357)(1122,1245,1264)(1124,1247,1360)(1130,1252,1364)(1131,1239,1341)(1132,1229,1346)(1134,1197,1313)(1138,1257,1343)(1139,1238,1354)(1143,1262,1374)(1144,1263,1375)(1146,1265,1297)(1151,1270,1379)(1153,1272,1381)(1155,1274,1314)(1162,1280,1386)(1168,1284,1388)(1172,1290,1393)(1174,1244,1358)(1177,1293,1397)(1179,1295,1246)(1182,1298,1401)(1189,1304,1348)(1191,1307,1409)(1194,1310,1412)(1195,1311,1205)(1201,1317,1419)(1202,1318,1421)(1208,1326,1273)(1210,1328,1319)(1211,1329,1430)(1212,1330,1224)(1222,1340,1439)(1232,1350,1444)(1242,1334,1433)(1249,1361,1451)(1251,1362,1453)(1253,1365,1457)(1254,1351,1445)(1258,1369,1460)(1260,1371,1462)(1268,1377,1467)(1271,1355,1447)(1276,1383,1440)(1277,1384,1282)(1278,1385,1474)(1285,1389,1296)(1286,1390,1332)(1288,1392,1479)(1291,1394,1475)(1292,1395,1473)(1294,1398,1481)(1299,1400,1391)(1300,1402,1367)(1302,1370,1461)(1305,1406,1487)(1308,1410,1492)(1312,1414,1495)(1315,1416,1491)(1321,1423,1500)(1323,1424,1502)(1324,1425,1411)(1327,1428,1505)(1335,1434,1507)(1337,1436,1510)(1338,1437,1512)(1344,1438,1513)(1347,1441,1515)(1352,1446,1518)(1356,1448,1387)(1359,1399,1477)(1363,1454,1420)(1366,1408,1489)(1368,1458,1465)(1372,1463,1478)(1373,1464,1482)(1376,1429,1506)(1378,1468,1530)(1380,1470,1531)(1382,1472,1534)(1396,1480,1535)(1403,1484,1422)(1404,1418,1498)(1405,1485,1528)(1407,1488,1540)(1413,1493,1543)(1415,1496,1426)(1417,1476,1529)(1427,1504,1537)(1431,1435,1508)(1432,1469,1449)(1442,1516,1456)(1443,1517,1541)(1450,1521,1539)(1455,1499,1548)(1459,1525,1561)(1466,1509,1554)(1471,1532,1486)(1483,1536,1520)(1490,1542,1555)(1494,1544,1570)(1497,1546,1503)(1501,1550,1519)(1511,1547,1572)(1514,1556,1526)(1522,1559,1581)(1523,1560,1582)(1527,1562,1557)(1533,1564,1583)(1538,1553,1578)(1545,1571,1575)(1549,1574,1591)(1551,1576,1563)(1552,1577,1594)(1558,1580,1595)(1565,1584,1569)(1566,1585,1598)(1567,1586,1599)(1568,1587,1592)(1573,1579,1588)(1589,1590,1593)]";

    public static final GFGenerator o8m2_2_gf28 = new GFGenerator(8, "[1,0,0,1,0,0,1,1],[0,1,0,0,0,0,0,0],[0,0,1,1,0,0,1,1],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1],[0,0,0,1,0,0,1,0]",
                                                                     "[0,1,0,1,1,0,0,1],[0,0,1,0,1,0,0,0],[1,1,0,0,1,0,1,0],[0,1,0,1,0,0,0,1],[0,1,1,0,1,1,0,1],[1,0,0,0,0,0,0,1],[1,0,0,0,1,0,0,0],[1,1,1,1,0,0,1,1]");
    public static final String      o8m2_2 = "[(3,25)(8,21)(9,36)(12,74)(15,22)(16,63)(17,52)(19,77)(24,60)(27,59)(28,32)(30,39)(35,86)(40,75)(43,71)(47,57)(48,64)(49,102)(50,95)(51,101)(68,116)(80,109)(81,112)(84,87)(94,106)(97,107)(98,103)(104,110),(1,103,72,21,9,92,16,19,58,52,62,70,75,82)(2,20,38,44,17,61,98)(3,77,88,13,68,105,57)(4,95,31,116,111,6,45,12,34,64,89,86,49,106)(5,115,48,46,29,79,50)(7,99,8,84,110,119,74)(10,47,22,65,39,73,97,104,55,66,27,14,60,76)(11,78,24,96,40,23,59)(15,53,37,107,43,102,81)(18,26,117,33,118,32,112,25,51,87,71,109,42,85)(28,94,56,41,35,80,93)(30,91,69,114,54,100,90)(36,108,67,113,83,63,101)]";

    public static void main(String[] args) {
        HashSet<State> states = new HashSet<>();
        GroupExplorer g = new GroupExplorer(l4_2_d12, MemorySettings.COMPACT, states, new HashSet<>(), new HashSet<>(), true);
        TreeMap<String, Integer> cycleDescriptions = new TreeMap<>();
        exploreGroup(g, null);

        // 
        

        System.out.println();

        TreeMap<Integer, String> sortedCycleDescriptions = new TreeMap<>();
        cycleDescriptions.entrySet().stream()
            .sorted((e1, e2) -> Integer.compare(e2.getValue(), e1.getValue()))
            .forEach(entry -> sortedCycleDescriptions.put(entry.getValue(), entry.getKey()));

        sortedCycleDescriptions.forEach((key, value) -> System.out.println(key + ": " + value));
    }

    public static void exploreGroup(GroupExplorer gap,
            BiConsumer<int[], String> peekCyclesAndDescriptions) {

        long nPermutations = 1;
        for (int i = 1; i <= gap.nElements; i++) {
            nPermutations *= i;
        }

        HashMap<String, Integer> cycleDescriptions = new HashMap<>();

        int iterations = gap.exploreStates(true, (states, depth) -> {
            for (int[] state : states) {
                String cycleDescription = GroupExplorer.describeState(gap.nElements, state);
                if (peekCyclesAndDescriptions != null) peekCyclesAndDescriptions.accept(state, cycleDescription);
                cycleDescriptions.merge(cycleDescription, 1, Integer::sum);
            }
        });
        
        System.out.println("Elements: " + gap.nElements);
        System.out.println("Total unique permutations: " + nPermutations);
        System.out.println("Total group permutations: " + gap.order());

        System.out.println("Subset: 1/" + ((double)nPermutations / gap.order()));
        System.out.println("Iterations: " + iterations);

        printCycleDescriptions(cycleDescriptions);

    }

    public static void printCycleDescriptions(HashMap<String, Integer> cycleDescriptions) {


        // Print sorted cycle descriptions
        System.out.println("Cycle structure frequencies:");
        cycleDescriptions.entrySet().stream()
            .sorted((e1, e2) -> {
                int comp = Integer.compare(e2.getValue(), e1.getValue()); // Sort by frequency descending
                if (comp == 0) {
                    return e1.getKey().compareTo(e2.getKey()); // If frequencies are equal, sort alphabetically
                }
                return comp;
            })
            .forEach(entry -> System.out.println(entry.getValue() + ": " + entry.getKey()));

    }

}
